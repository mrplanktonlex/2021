============

CALL, APPLY and BIND in JS.

// 1. call : function calls outside object. (VIMP: outside object can be function too, since functions are objects in JS)
// var obj = { num : 2 };
// var addToThis = function(a){
//   return this.num + a; // using outside obj's prop/val within.
// }
// console.log(addToThis.call(obj, 3));

// 2. apply 
// var obj = { num : 2 };
// var addToThis = function(a, b, c){
//   return this.num + a + b + c; // using outside obj's prop/val within.
// }
// console.log(addToThis.call(obj, 3, 1, 1)); // -OR- use apply
// let arr = [3, 1, 1];
// console.log(addToThis.apply(obj, arr)); 

// 3. bind
var obj = { num : 2 };
var addToThis = function(a, b, c){
  return this.num + a + b + c; // using outside obj's prop/val within.
}
let bound = addToThis.bind(obj); // No params. just the outside object.
console.log(bound(3, 1,1));

==========

PROTOTYPE inheritance in POJO:-  https://codepen.io/mr_jnsn/pen/vYgdGBZ?editors=0011 

// Parent class
let Job = function(){
  this.pays = true;
};
Job.prototype.print = function(){
  console.log('printing in base class');
}

// Subclass
let Techjob = function(title, pays){
  Job.call(this);     ///<<<==== VIMP1.
  this.title = title;
  this.pays = pays;
}
Techjob.prototype = Object.create(Job.prototype); ///<<<==== VIMP2
Techjob.prototype.constructor = Techjob;          ///<<<==== VIMP3. circular reference to itself.

// Uncomment below lines, then base class method WONT be called !!!
// Techjob.prototype.print = function(){    // So method overriding is possible. If subclass has its own implementation of print(), then subclass version will be call, else if not present, then the parent class's version will be called.
//   console.log('printing in sub class');
// }

let obj1 = new Techjob('JS', true);
obj1.print();

// Note method overloading is NOT possible in sub class, but method overriding is possible

==========

Currying:-
		let parentFunc1 = (p1) => {
		  console.log('parentFunc1', p1);
		  return function(p2){
		  console.log('returnFunc1', p2);
			return function(p3){
		  console.log('returnFunc2', p3);
			}
		  }
		}
		//1. call it all in one go
		parentFunc1(10)(2)(1);
		//2. call it in partial-application 
		console.log('+++++');
		let x = parentFunc1(10)(2);
		x(222);

---

Method Chaining: 1) using 1 Promise with multiple then()s, 
				 2) using Promise returning Promise2 returning Promise 3,
				 3) using Func1 returning Promise1,
				 
	//1. method chaining:- using ONLY 1 promise.
		 let someCondition = true;
		 let p1 = new Promise((resolve, reject)=>{
		   return someCondition? resolve('parentFunc1 resolved'): reject('parentFunc1 rejected');
		 });

		 p1.then((result)=>{
		  console.log('111', result);
		   return result; // VIMP.
		}).then((result) => {
		  console.log('222', result);
		  return result; // CIMP
		});

	//2. method chaining: promise1 return promise2. 
		 let pro1 = new Promise((res1, rej1)=>{
		   res1('111');
		 });

		 pro1.then((result)=>{
		   console.log(result);
			  return new Promise((res2, rej2)=>{
			  res2('222');
		   });
		}).then((result)=>{
		   console.log(result);
			  return new Promise((res3, rej3)=>{
			   res3('333');
			  });
		 }).then((result)=>{
			  console.log(result);
			  console.log('finished');
		 });

	//3. method chaining #2:- function-which-returns-promises 
		 let someCondition2 = false;
		 let f1 = () => {
		   return new Promise((resolve, reject)=>{
			 someCondition2 ? resolve('Promise Resolved') : reject('Promise Reject'); 
		   }); 
		 };

		 // f1 has to executed. 
		f1().then((result)=>{
		   console.log(result, '111');
		   return result; // have to return if u want next .then 
		 }).then((result)=>{
		   console.log(result, '222');
		 }).finally(()=>{
		   console.log('Promise logic ends');
		 });


	// 4: using function as class. 
		let func1 = function(){   // (VIMP:= note wrapper function should be function() and not arrow function.)
		  this.one = () => { console.log('one'); return this; }
		  this.two = () => { console.log('two'); return this; }
		  this.three = () => { console.log('three'); return this; }
		};
		  
		let obj1 = new func1();
		obj1.one().two().three();

==========

Event Bubbling eg.

1) 

 <div id="div1" onclick="handleDiv1()" style="border: 15px solid red">
  <div id="div2" onclick="handleDiv2()" style="border: 15px solid green">
    <div id="div3" onclick="handleDiv3()" style="border: 15px solid blue">
      <button id="btn1" onclick = "handleButton()">Click me!</button>
    </div>
  </div>
</div>

// JS

let handleButton = function(){
  // event.target == the exact html element
  console.log('--button clicked--',  typeof(event.target), Object.keys(event.target), Object.values(event.target));  // Object, [], [] 
  console.log(event.target.tagName, event.target.nodeName, event.target.id); // BUTTON, BUTTON, btn1 (make sure id is mention in html-element)
}

let handleDiv3 = function(){
  console.log('--div3 triggered--', event.target.id);   
}
// VIMP: when div3 is clicked, all methods handleDiv3(), handleDiv2(), handleDiv1() will have "div3" in event.target.id.
// so event.target.id is not reliable.

let handleDiv2 = function(){
  console.log('--div2 triggered--', event.target.id);
}

let handleDiv1 = function(){
  console.log('--div1 triggered--', event.target.id);
}

---

AddEventListener (3rd param is useCapture) -vs- hard-coded onclick, onmouseout, etc. 

--- 

event.which // mouse buttons 1=left, 2=middle, 3=right
event.type // returns type of event : mouseup, mousedown, etc. 

---


